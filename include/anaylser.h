#include<bits/stdc++.h>
#include "NFA_TO_DFA.h"

using namespace std;
class Token
{
    private :
        string token_class ;
        string token_value ;
    public :
        // constructer
        Token(string token_class , string token_value);

        // getter and setter
        string get_token_class();
        string get_token_value();
};

class Lexical_analyser
{
    private :
        // object for DF
        DFA* dfa_machine ;
        int current_line ;
        int current_char ;
        string input_file;
        vector< pair<string,string> > symbol_table ;
        vector<string> tokens;
    public :
        // constructer
        Lexical_analyser(){}
        Lexical_analyser(string filePath , DFA* dfa_machine);

        // return next token in the program
       Token* get_next_token(ifstream &file , bool error , int current_char);

        // report error
        Token* error_handler(ifstream &file , int inital_char , int final_char , string token_value);

        //
        void get_tokens();

        vector<string> get_token_values(){return this->tokens;}

        // get symbol table generated by the lexical analyser
        vector< pair<string,string> >  get_symbol_table(){ return this->symbol_table; }


};

